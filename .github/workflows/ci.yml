name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [published]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod tidy

      - name: Run tests
        run: go test -v ./...

      - name: Run linter
        run: |
          go install golang.org/x/lint/golint@latest
          golint -set_exit_status ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            output: terminal-link-linux-amd64
          - os: linux
            arch: arm64
            output: terminal-link-linux-arm64
          - os: darwin
            arch: amd64
            output: terminal-link-darwin-amd64
          - os: darwin
            arch: arm64
            output: terminal-link-darwin-arm64
          - os: windows
            arch: amd64
            output: terminal-link-windows-amd64.exe
          - os: windows
            arch: arm64
            output: terminal-link-windows-arm64.exe
          - os: linux
            arch: arm64
            output: terminal-link-android-arm64
            cgo: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod tidy

      - name: Build binary
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: ${{ matrix.cgo || '1' }}
        run: |
          go build -ldflags="-s -w" -o ${{ matrix.output }} main.go
          ls -la ${{ matrix.output }}

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.output }}
          path: ${{ matrix.output }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create release assets
        run: |
          mkdir -p dist
          mv terminal-link-* dist/
          cd dist
          ls -la
          sha256sum * > checksums.txt
          cd ..

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  size-check:
    name: Binary Size Check
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Check binary sizes
        run: |
          echo "Binary sizes:"
          for file in terminal-link-*; do
            if [ -f "$file" ]; then
              size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null)
              size_mb=$(echo "scale=2; $size/1024/1024" | bc -l)
              echo "$file: ${size_mb}MB"
              
              # Check if binary is under 15MB limit
              if [ $(echo "$size_mb > 15" | bc -l) -eq 1 ]; then
                echo "❌ $file exceeds 15MB limit (${size_mb}MB)"
                exit 1
              else
                echo "✅ $file is under 15MB limit (${size_mb}MB)"
              fi
            fi
          done 